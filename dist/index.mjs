const e=(t=async(e,t)=>async function*(e){const t=e.getReader(),o=new TextDecoder;try{for(;;){const{done:e,value:r}=await t.read();if(e)return;yield JSON.parse(o.decode(r))}}finally{t.releaseLock()}}((await e("pubsub/sub",{arg:t},{timeout:!1})).body),(e,...o)=>t((e=>(t,o={},r={})=>{const a=new URLSearchParams(o),n=`${e.url}/${t}${a&&"?"+a}`;return e.fetch(n,{method:"POST",headers:{"Content-Type":"application/json"},...r})})(e),...o));var t;var o=Object.freeze({__proto__:null,subscribe:e});function r(e={}){const{protocol:t="http",host:o="localhost",port:r=5001,path:a="api/v0",url:n=`${t}://${o}:${r}/${a}`,fetch:s=fetch,timeout:c=5e3}=e;return{url:n,fetch:(e,t)=>!1===t.timeout||!1===c?s(e,t):Promise.race([new Promise(((e,o)=>setTimeout((()=>o("Request timed out")),t.timeout||c))),s(e,t)])}}export{r as createClient,o as pubsub};
//# sourceMappingURL=index.mjs.map
